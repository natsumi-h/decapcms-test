---
import { Image } from "astro:assets";
import Button from "@/components/Parts/Button.astro";
import Section from "@/components/Parts/Section.astro";
import SectionTitle from "@/components/Parts/SectionTitle.astro";

interface Props {
  impact: {
    title: string;
    number: number;
    unit: string;
    image: ImageMetadata;
  }[];
}

const { impact } = Astro.props;
---

<Section bg="green" text="white">
  <SectionTitle textalign="left" color="white">Our Impact</SectionTitle>

  <!-- Cards -->
  <div
    class="flex justify-center align-middle text-center mt-[1.25rem] flex-col md:flex-row
  gap-x-[1rem] gap-y-[2.5rem] flex-wrap"
  >
    {
      impact.map((item: any) => (
        // Card
        <div
          class="w-full md:w-[calc(25%-1rem*3/4)] flex flex-col impactitem"
          data-from="0"
          data-to={item.number}
          data-duration="500"
        >
          <Image
            src={item.image}
            alt="Our Impact"
            width={100}
            height={100}
            class="mx-auto"
          />
          {/* number */}
          <p class="~text-[2rem]/[4.6875rem] font-bold leading-normal ">
            {item.unit === "$" && <span>$</span>}
            <span class="impactnumber">0</span>
            {item.unit !== "$" && <span>{item.unit}</span>}
          </p>
          <p class="text-[1.875rem] font-bold leading-none self-center flex flex-grow items-center">
            {item.title}
          </p>
        </div>
      ))
    }
  </div>

  <div class="flex justify-center mt-[2.3125rem]">
    <Button text="Learn more" href="/education" />
  </div>
</Section>
<script is:inline>
  const items = document.querySelectorAll(".impactitem");

  const getDecimalPointLength = (n) => {
    return (String(n).split(".")[1] || "").length;
  };

  const observeAction = (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        if (!entry.target.classList.contains("is-visible")) {
          const counterEle = entry.target.querySelector(".impactnumber");
          const from = parseFloat(entry.target.dataset.from || 0);
          const to = parseFloat(entry.target.dataset.to || 0);
          const duration = parseInt(entry.target.dataset.duration) || 1500;

          if (!Number.isFinite(from) || !Number.isFinite(to) || from > to) {
            return false;
          }

          const increment = to - from;
          const deciamlPointLength = getDecimalPointLength(increment);
          const startTime = performance.now();

          const countUp = () => {
            const elapsed = performance.now() - startTime;
            const countValue = (
              from +
              (elapsed / duration) * increment
            ).toFixed(deciamlPointLength);

            if (countValue >= to) {
              counterEle.innerText = to.toLocaleString();
            } else {
              counterEle.innerText = parseFloat(countValue).toLocaleString();
              requestAnimationFrame(countUp);
            }
          };

          requestAnimationFrame(countUp);

          entry.target.classList.add("is-visible");
        }
      }
    });
  };

  const options = {
    threshold: 1,
  };

  const obsever = new IntersectionObserver(observeAction, options);

  items.forEach((target) => {
    obsever.observe(target);
  });
</script>
